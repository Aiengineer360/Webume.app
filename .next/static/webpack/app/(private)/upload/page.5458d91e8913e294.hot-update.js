"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(private)/upload/page",{

/***/ "(app-pages-browser)/./hooks/useUserActions.tsx":
/*!**********************************!*\
  !*** ./hooks/useUserActions.tsx ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUserActions: () => (/* binding */ useUserActions)\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/.pnpm/@tanstack+react-query@5.69.0_react@19.0.0/node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/.pnpm/@tanstack+react-query@5.69.0_react@19.0.0/node_modules/@tanstack/react-query/build/modern/useQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-query */ \"(app-pages-browser)/./node_modules/.pnpm/@tanstack+react-query@5.69.0_react@19.0.0/node_modules/@tanstack/react-query/build/modern/useMutation.js\");\n/* harmony import */ var _lib_resume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/resume */ \"(app-pages-browser)/./lib/resume.ts\");\nvar _s = $RefreshSig$();\n\n\n// Fetch resume data\nconst fetchResume = async ()=>{\n    const response = await fetch('/api/resume');\n    if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to fetch resume');\n    }\n    return await response.json();\n};\nconst fetchUsername = async ()=>{\n    const response = await fetch('/api/username');\n    if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to fetch username');\n    }\n    return await response.json();\n};\nconst checkUsernameAvailability = async (username)=>{\n    const response = await fetch(\"/api/check-username?username=\".concat(encodeURIComponent(username)), {\n        method: 'POST'\n    });\n    if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Failed to check username availability');\n    }\n    return await response.json();\n};\nfunction useUserActions() {\n    _s();\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQueryClient)();\n    // const { uploadToS3 } = useS3Upload();\n    // Query for fetching resume data\n    const resumeQuery = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery)({\n        queryKey: [\n            'resume'\n        ],\n        queryFn: fetchResume\n    });\n    const usernameQuery = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery)({\n        queryKey: [\n            'username'\n        ],\n        queryFn: fetchUsername\n    });\n    const internalResumeUpdate = async (newResume)=>{\n        const response = await fetch('/api/resume', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(newResume)\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            return Promise.reject(new Error(error));\n        }\n    };\n    const internalUsernameUpdate = async (newUsername)=>{\n        const response = await fetch('/api/username', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username: newUsername\n            })\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            return Promise.reject(error);\n        }\n        return {\n            success: true\n        };\n    };\n    // Helper: upload file to Vercel Blob via our API\n    const uploadToBlob = async (file)=>{\n        const formData = new FormData();\n        formData.append('file', file);\n        const response = await fetch('/api/blob-upload', {\n            method: 'POST',\n            body: formData\n        });\n        if (!response.ok) {\n            const text = await response.text();\n            throw new Error(text || 'Blob upload failed');\n        }\n        return response.json();\n    };\n    // Update resume data in storage using Vercel Blob\n    const uploadFileResume = async (file)=>{\n        try {\n            const fileOnBlob = await uploadToBlob(file);\n            const newResume = {\n                file: {\n                    name: file.name,\n                    url: fileOnBlob.url,\n                    size: fileOnBlob.size,\n                    bucket: fileOnBlob.bucket,\n                    key: fileOnBlob.key\n                },\n                resumeData: undefined,\n                status: 'draft'\n            };\n            queryClient.setQueryData([\n                'resume'\n            ], (oldData)=>({\n                    resume: newResume\n                }));\n            await internalResumeUpdate(newResume);\n        } catch (error) {\n            if (error instanceof Error) {\n                throw new Error(\"Upload failed: \".concat(error.message));\n            }\n            throw error;\n        }\n    };\n    // Mutation for updating resume\n    const uploadResumeMutation = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation)({\n        mutationFn: uploadFileResume,\n        onSuccess: {\n            \"useUserActions.useMutation[uploadResumeMutation]\": ()=>{\n            // Cache is already set optimistically, no need to invalidate\n            // queryClient.invalidateQueries({ queryKey: ['resume'] });\n            }\n        }[\"useUserActions.useMutation[uploadResumeMutation]\"]\n    });\n    // Mutation for toggling status of publishment\n    const toggleStatusMutation = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation)({\n        mutationFn: {\n            \"useUserActions.useMutation[toggleStatusMutation]\": async (newPublishStatus)=>{\n                var _resumeQuery_data, _resumeQuery_data1;\n                if (!((_resumeQuery_data = resumeQuery.data) === null || _resumeQuery_data === void 0 ? void 0 : _resumeQuery_data.resume)) return;\n                await internalResumeUpdate({\n                    ...(_resumeQuery_data1 = resumeQuery.data) === null || _resumeQuery_data1 === void 0 ? void 0 : _resumeQuery_data1.resume,\n                    status: newPublishStatus\n                });\n            }\n        }[\"useUserActions.useMutation[toggleStatusMutation]\"],\n        onSuccess: {\n            \"useUserActions.useMutation[toggleStatusMutation]\": ()=>{\n                // Invalidate and refetch resume data\n                queryClient.invalidateQueries({\n                    queryKey: [\n                        'resume'\n                    ]\n                });\n            }\n        }[\"useUserActions.useMutation[toggleStatusMutation]\"]\n    });\n    // Update theme/template\n    const updateThemeMutation = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation)({\n        mutationFn: {\n            \"useUserActions.useMutation[updateThemeMutation]\": async (opts)=>{\n                var _resumeQuery_data;\n                if (!((_resumeQuery_data = resumeQuery.data) === null || _resumeQuery_data === void 0 ? void 0 : _resumeQuery_data.resume)) return;\n                const updated = {\n                    ...resumeQuery.data.resume,\n                    theme: {\n                        palette: opts.palette,\n                        template: opts.template\n                    }\n                };\n                await internalResumeUpdate(updated);\n            }\n        }[\"useUserActions.useMutation[updateThemeMutation]\"],\n        onSuccess: {\n            \"useUserActions.useMutation[updateThemeMutation]\": ()=>{\n                queryClient.invalidateQueries({\n                    queryKey: [\n                        'resume'\n                    ]\n                });\n            }\n        }[\"useUserActions.useMutation[updateThemeMutation]\"]\n    });\n    // mutation to allow editing a username for a user_id, if it fails means that username is already taken\n    const updateUsernameMutation = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation)({\n        mutationFn: internalUsernameUpdate,\n        onSuccess: {\n            \"useUserActions.useMutation[updateUsernameMutation]\": ()=>{\n                // Invalidate and refetch username data\n                queryClient.invalidateQueries({\n                    queryKey: [\n                        'username'\n                    ]\n                });\n            }\n        }[\"useUserActions.useMutation[updateUsernameMutation]\"],\n        throwOnError: false\n    });\n    // Mutation for checking username availability\n    const checkUsernameMutation = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation)({\n        mutationFn: checkUsernameAvailability,\n        onSuccess: {\n            \"useUserActions.useMutation[checkUsernameMutation]\": ()=>{\n                // Invalidate and refetch username availability data\n                queryClient.invalidateQueries({\n                    queryKey: [\n                        'username-availability'\n                    ]\n                });\n            }\n        }[\"useUserActions.useMutation[checkUsernameMutation]\"]\n    });\n    // Function to save resume data changes\n    const saveResumeDataChanges = async (newResumeData)=>{\n        // Validate the resume data using Zod schema\n        try {\n            var _resumeQuery_data;\n            // Validate the resume data\n            _lib_resume__WEBPACK_IMPORTED_MODULE_0__.ResumeDataSchema.parse(newResumeData);\n            // If validation passes, update the resume\n            if (!((_resumeQuery_data = resumeQuery.data) === null || _resumeQuery_data === void 0 ? void 0 : _resumeQuery_data.resume)) {\n                throw new Error('No resume found to update');\n            }\n            const updatedResume = {\n                ...resumeQuery.data.resume,\n                resumeData: newResumeData\n            };\n            await internalResumeUpdate(updatedResume);\n            return {\n                success: true\n            };\n        } catch (error) {\n            if (error instanceof Error) {\n                throw new Error(\"Validation failed: \".concat(error.message));\n            }\n            throw error;\n        }\n    };\n    // Mutation for saving resume data changes\n    const saveResumeDataMutation = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation)({\n        mutationFn: saveResumeDataChanges,\n        onSuccess: {\n            \"useUserActions.useMutation[saveResumeDataMutation]\": ()=>{\n                // Invalidate and refetch resume data\n                queryClient.invalidateQueries({\n                    queryKey: [\n                        'resume'\n                    ]\n                });\n            }\n        }[\"useUserActions.useMutation[saveResumeDataMutation]\"]\n    });\n    // Available palettes & templates for UI\n    const availablePalettes = [\n        {\n            id: 'ocean',\n            name: 'Ocean (Blue)'\n        },\n        {\n            id: 'royal',\n            name: 'Royal (Deep Blue)'\n        },\n        {\n            id: 'forest',\n            name: 'Forest (Green)'\n        },\n        {\n            id: 'sunset',\n            name: 'Sunset (Warm)'\n        }\n    ];\n    const availableTemplates = [\n        {\n            id: 'classic',\n            name: 'Classic'\n        },\n        {\n            id: 'compact',\n            name: 'Compact'\n        }\n    ];\n    return {\n        resumeQuery,\n        uploadResumeMutation,\n        toggleStatusMutation,\n        usernameQuery,\n        updateUsernameMutation,\n        checkUsernameMutation,\n        saveResumeDataMutation,\n        updateThemeMutation,\n        availablePalettes,\n        availableTemplates\n    };\n}\n_s(useUserActions, \"zdCpj3k0RV98I7LFlvsvBocpRIs=\", false, function() {\n    return [\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.useQueryClient,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_2__.useQuery,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation,\n        _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.useMutation\n    ];\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useUserActions.tsx\n"));

/***/ })

});